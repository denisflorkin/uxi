version: 2

jobs:
  install:
    docker: # See https://docs.docker.com/get-started/#docker-concepts if you are new to Docker.
      - image: circleci/node
    steps:
      ## checkout ##
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - checkout
      - save_cache:
          key: source-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"

      ## npm i ##
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-node_modules{{ checksum "package-lock.json" }}
      - run: npm i
      # only save cache here (insatll step) to avoid race condition on cache
      - save_cache:
          key: source-v1-{{ .Branch }}-node_modules{{ checksum "package-lock.json" }}
          paths:
            - "./node_modules"

  pack:
    docker: # See https://docs.docker.com/get-started/#docker-concepts if you are new to Docker.
      - image: circleci/node
    steps:
      ## checkout ##
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - checkout

      ## npm i ##
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-node_modules{{ checksum "package-lock.json" }}
      - run: npm i

      ## npm run prod ##
      # Caching build might seems ridiculous, but in case of (later in worflow)
      # stupid network fail, it might end up usefull
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}-dist
      - run: npm run pack

      # build can save cache IN THIS KEY becaue he's the ONLY one using it when running in parrallel with test
      - save_cache:
          key: source-v1-{{ .Branch }}-{{ .Revision }}-dist
          paths:
            - "./dist"

  test:
    docker:
      - image: circleci/node
    steps:
      ## checkout ##
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - checkout

      ## npm i ##
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-node_modules{{ checksum "package-lock.json" }}
      - run: npm i

      - run: npm dedupe             # because reasons, without that zopfli(jest>request) fails and all goes to hell
      - run: npm run test

  publish:
    docker:
      - image: circleci/node
    steps:
      ## checkout ##
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - checkout
      # deploy can save cache becaue nothing is gonna run un parallele with it
      - save_cache:
          key: source-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"

      ## npm i ##
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-node_modules{{ checksum "package-lock.json" }}
      - run: npm i
      # deploy can save cache becaue nothing is gonna run un parallele with it
      - save_cache:
          key: source-v1-{{ .Branch }}-node_modules{{ checksum "package-lock.json" }}
          paths:
            - "./node_modules"

      # - run: npm run prod
      ## npm run prod ##
      # Caching build might seems ridiculous, but in case of (later in worflow)
      # stupid network fail, like npm/git failling it might end up usefull
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}-dist
      - run: npm run pack          # DEV ONLY build faster BUT should be `npm run prod`  !!!
      # deploy can save cache becaue nothing is gonna run un parallele with it
      - save_cache:
          key: source-v1-{{ .Branch }}-{{ .Revision }}-dist
          paths:
            - "./dist"

      - run: echo "//registry.npmjs.org/:_authToken=$CICIMAINTAINER_NPM_TOKEN" >> ~/.npmrc
      - run: git config --global user.name $CICIMAINTAINER_NAME
      - run: git config --global user.email $CICIMAINTAINER_EMAIL

      - run: echo '§ publishing assets to cdn...'
      # - run: npm run gulppublish
      # - run: npm run __gulppublishprod


      - run: echo '§ publishing to npm registry...'
      # - run: npm run copy-files
      - run: npm publish build           # Let's wait to actually deploy to add this one

      - run: echo '§ pushing back to github remote...'
      - run: git add .
      - run: git diff-index --quiet HEAD || git commit --no-verify -m "published $(node -pe "require('./package.json').version") [ci skip]"
      - run: git push https://github.com/uxilab/uxi.git HEAD:master --follow-tags

  deployDocumentation:
    docker:
      - image: circleci/node
    steps:
      ## checkout ##
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - checkout
      # deploy can save cache becaue nothing is gonna run un parallele with it
      - save_cache:
          key: source-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"

      - run: LATEST_SHA1=$(git rev-parse HEAD)
      - run: echo "$LATEST_SHA1"
      - run: |
        cat >~/.netrc <<EOF
        machine api.heroku.com
          login $HEROKU_EMAIL
          password $HEROKU_TOKEN
        machine git.heroku.com
          login $HEROKU_EMAIL
          password $HEROKU_TOKEN
        EOF
      - run: chmod 600 ~/.netrc # Heroku cli complains about permissions without this
      # - "[[ ! -s \"$(git rev-parse --git-dir)/shallow\" ]] || git fetch --unshallow"
      # - git push git@heroku.com:cluedintest.git $CIRCLE_SHA1:refs/heads/master
      # - git push git@heroku.com:cluedintest.git $LATEST_SHA1:refs/heads/master
      - run: git push -f git@heroku.com:uxilab.git master:master


workflows:
  version: 2
  uxi-npm-publish:
    jobs:
      - install
      - test:
          requires:
            - install
      - pack:
          requires:
            - install
      # - publish:
      #     requires:
      #       - test
      #       - pack
      #     filters:
      #       branches:
      #         only: master
  uxi-documentation-publish:
    jobs:
      - install
      - test:
          requires:
            - install
      - pack:
          requires:
            - install
      # - deployDocumentation:
      #     requires:
      #       - test
      #       - pack
      #     filters:
      #       branches:
      #         only: master
