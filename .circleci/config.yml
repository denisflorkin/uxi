version: 2
jobs:
  install:
    docker: # See https://docs.docker.com/get-started/#docker-concepts if you are new to Docker.
      - image: circleci/node
    steps:
      ## checkout ##
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - checkout
      - save_cache:
          key: source-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"

      ## npm i ##
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-node_modules{{ checksum "package-lock.json" }}
      - run: npm i
      # only save cache here (insatll step) to avoid race condition on cache
      - save_cache:
          key: source-v1-{{ .Branch }}-node_modules{{ checksum "package-lock.json" }}
          paths:
            - "./node_modules"

  pack:
    docker: # See https://docs.docker.com/get-started/#docker-concepts if you are new to Docker.
      - image: circleci/node
    steps:
      ## checkout ##
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - checkout

      ## npm i ##
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-node_modules{{ checksum "package-lock.json" }}
      - run: npm i

      ## npm run prod ##
      # Caching build might seems ridiculous, but in case of (later in worflow)
      # stupid network fail, it might end up usefull
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}-dist
      - run: npm run pack

      # build can save cache IN THIS KEY becaue he's the ONLY one using it when running in parrallel with test
      - save_cache:
          key: source-v1-{{ .Branch }}-{{ .Revision }}-dist
          paths:
            - "./dist"

  test:
    docker:
      - image: circleci/node
    steps:
      ## checkout ##
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - checkout

      ## npm i ##
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-node_modules{{ checksum "package-lock.json" }}
      - run: npm i

      - run: npm dedupe             # because reasons, without that zopfli(jest>request) fails and all goes to hell
      - run: npm run test

  deploy:
    docker:
      - image: circleci/node
    steps:
      ## checkout ##
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - checkout
      # deploy can save cache becaue nothing is gonna run un parallele with it
      - save_cache:
          key: source-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"

      ## npm i ##
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-node_modules{{ checksum "package-lock.json" }}
      - run: npm i
      # deploy can save cache becaue nothing is gonna run un parallele with it
      - save_cache:
          key: source-v1-{{ .Branch }}-node_modules{{ checksum "package-lock.json" }}
          paths:
            - "./node_modules"

      # - run: npm run prod
      ## npm run prod ##
      # Caching build might seems ridiculous, but in case of (later in worflow)
      # stupid network fail, like npm/git failling it might end up usefull
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}-dist
      - run: npm run pack          # DEV ONLY build faster BUT should be `npm run prod`  !!!
      # deploy can save cache becaue nothing is gonna run un parallele with it
      - save_cache:
          key: source-v1-{{ .Branch }}-{{ .Revision }}-dist
          paths:
            - "./dist"

      - run: echo "//registry.npmjs.org/:_authToken=$CICIMAINTAINER_NPM_TOKEN" >> ~/.npmrc
      - run: git config --global user.name $CICIMAINTAINER_NAME
      - run: git config --global user.email $CICIMAINTAINER_EMAIL

      - run: echo '§ publishing assets to cdn...'
      # - run: npm run gulppublish
      # - run: npm run __gulppublishprod


      - run: echo '§ publishing to npm registry...'
      # - run: npm run copy-files
      - run: npm publish build           # Let's wait to actually deploy to add this one

      - run: echo '§ pushing back to github remote...'
      - run: git add .
      - run: git diff-index --quiet HEAD || git commit --no-verify -m "published $(node -pe "require('./package.json').version") to test [ci skip]"
      - run: git push https://github.com/uxilab/uxi.git HEAD:master --follow-tags

workflows:
  version: 2
  uxi-publish-workflow:
    jobs:
      - install
      - test:
          requires:
            - install
      - build:
          requires:
            - install
      - deploy:
          requires:
            - test
            - build
          filters:
            branches:
              # only: master
              ## DEV ONLY ##:
              only: master
